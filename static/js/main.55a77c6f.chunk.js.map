{"version":3,"sources":["Components/Timer.jsx","Components/TimeSet.jsx","assets/pause.mp3","App.js","serviceWorker.js","index.js"],"names":["Timer","props","convertToMinSec","duration","minutes","Math","floor","seconds","bind","className","id","this","cycle","clock","isPlaying","onClick","handlePlay","handleReset","Component","TimeSet","cyclePrefix","title","time","handleIncrease","handleDecrease","App","handleSessionDecrease","sessionTime","state","setState","updateCount","handleSessionIncrease","handleBreakDecrease","breakTime","handleBreakIncrease","started","clockCount","clearInterval","loop","setInterval","playSound","audio","document","getElementById","pause","currentTime","undefined","value","play","breakProps","sessionProps","preload","src","Sound","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.55a77c6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.convertToMinSec = this.convertToMinSec.bind(this);\r\n  }\r\n\r\n  //this function will convert duration from seconds to timer format : mm : ss\r\n  convertToMinSec = (duration) => {\r\n\r\n    let minutes = Math.floor(duration / 60);\r\n    let seconds = duration % 60;\r\n\r\n    minutes = minutes < 10 ? ('0' + minutes) : minutes;\r\n    seconds = seconds < 10 ? ('0' + seconds) : seconds;\r\n\r\n    return `${ minutes }:${ seconds }`;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"running-clock\">\r\n        <h2 id=\"timer-label\">{ this.props.cycle } Time</h2>\r\n\r\n        <div id=\"time-left\">\r\n          { this.convertToMinSec(this.props.clock) }\r\n        </div>\r\n\r\n        <div className=\"buttons\">\r\n          <button \r\n            id=\"start_stop\"\r\n            className={ this.props.isPlaying ? 'pause' : 'play' }\r\n            onClick={ this.props.handlePlay }>\r\n            { this.props.isPlaying ? 'Pause' : 'Play' }\r\n          </button>\r\n\r\n          <button \r\n            id=\"reset\"\r\n            className=\"reset\"\r\n            onClick={ this.props.handleReset }>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;","   \r\nimport React, { Component } from 'react';\r\n\r\nclass TimeSet extends Component {\r\n  render() {\r\n    const cyclePrefix = this.props.title === 'Session' ? 'session' : 'break';\r\n\r\n    return (\r\n      <div className=\"time-input\">\r\n          <h3 id={`${ cyclePrefix }-label`}>{ this.props.title } length</h3>\r\n          \r\n          <span id={`${ cyclePrefix }-length`}>{ this.props.time }</span>\r\n\r\n          <div className=\"buttons\">\r\n              <div id=\"increment\"> <button \r\n              id={`${ cyclePrefix }-increment`}\r\n              className=\"increase\"\r\n              onClick={ this.props.handleIncrease }>\r\n              Increase value\r\n            </button>\r\n            </div>\r\n\r\n              <div id=\"decrement\"> <button \r\n              id={`${ cyclePrefix }-decrement`}\r\n              className=\"decrease\"\r\n              onClick={ this.props.handleDecrease }>\r\n              Decrease value\r\n            </button>\r\n                </div>\r\n           \r\n           \r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TimeSet;","export default __webpack_public_path__ + \"static/media/pause.d76b1475.mp3\";","import React, { Component } from 'react';\r\nimport Timer from './Components/Timer';\r\nimport TimeSet from './Components/TimeSet';\r\nimport Sound from './assets/pause.mp3';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      cycle: 'Session',\r\n      sessionTime: 25,\r\n      breakTime: 5,\r\n      clockCount: 0,\r\n      started: false,\r\n      isPlaying: false\r\n    }\r\n\r\n    this.loop = undefined;\r\n\r\n    this.handleBreakDecrease = this.handleBreakDecrease.bind(this);\r\n    this.handleBreakIncrease = this.handleBreakIncrease.bind(this);\r\n    this.handleSessionDecrease = this.handleSessionDecrease.bind(this);\r\n    this.handleSessionIncrease = this.handleSessionIncrease.bind(this);\r\n    this.handlePlay = this.handlePlay.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const sessionTime = this.state.sessionTime;\r\n\r\n    this.setState({\r\n      clockCount: sessionTime * 60\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.loop);\r\n  }\r\n\r\n  handleSessionDecrease = () => {\r\n    const sessionTime = this.state.sessionTime;\r\n\r\n    if(sessionTime - 1 > 0) {\r\n      this.setState({\r\n        cycle: 'Session',\r\n        sessionTime: sessionTime - 1\r\n      });\r\n\r\n      this.updateCount((sessionTime - 1));\r\n    }\r\n  }\r\n\r\n  handleSessionIncrease = () => {\r\n    const sessionTime = this.state.sessionTime;\r\n\r\n    if(sessionTime + 1 < 61) {\r\n      this.setState({\r\n        cycle: 'Session',\r\n        sessionTime: sessionTime + 1\r\n      });\r\n\r\n      this.updateCount((sessionTime + 1))\r\n    }\r\n  }\r\n\r\n  handleBreakDecrease = () => {\r\n    const breakTime = this.state.breakTime;\r\n\r\n    if(breakTime - 1 > 0) {\r\n      this.setState({\r\n        cycle: 'Break',\r\n        breakTime: breakTime - 1\r\n      });\r\n\r\n      this.updateCount((breakTime - 1))\r\n    }\r\n  }\r\n\r\n  handleBreakIncrease = () => {\r\n    const breakTime = this.state.breakTime;\r\n\r\n    if(breakTime + 1 < 61) {\r\n      this.setState({\r\n        cycle: 'Break',\r\n        breakTime: breakTime + 1\r\n      });\r\n\r\n      \r\n      this.updateCount((breakTime + 1))\r\n    }\r\n\r\n  }\r\n\r\n  updateCount(value) {\r\n    this.setState({\r\n      clockCount: value * 60\r\n    });\r\n  }\r\n\r\n  handlePlay = () => {\r\n    const isPlaying = this.state.isPlaying;\r\n    const sessionTime = this.state.sessionTime;\r\n    const started = this.state.started;\r\n\r\n    if(!started) {\r\n      this.setState({\r\n        clockCount: sessionTime * 60,\r\n        cycle: 'Session',\r\n        started: true\r\n      });\r\n    }\r\n    \r\n    if(isPlaying) {\r\n      clearInterval(this.loop);\r\n\r\n      this.setState({\r\n        isPlaying: false\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        isPlaying: true\r\n      });\r\n\r\n      this.loop = setInterval(() => {\r\n        const clockCount = this.state.clockCount;\r\n        const cycle = this.state.cycle;\r\n        const breakTime = this.state.breakTime;\r\n        const sessionTime = this.state.sessionTime;\r\n\r\n        if(clockCount === 0) {\r\n          this.setState({\r\n            cycle: cycle === 'Session' ? 'Break' : 'Session',\r\n            clockCount: cycle === 'Session' ? (breakTime * 60) : (sessionTime * 60)\r\n          });\r\n\r\n          this.playSound();\r\n        } \r\n        else {\r\n          this.setState({\r\n            clockCount: clockCount - 1\r\n          });\r\n        }        \r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  playSound() {\r\n    let audio = document.getElementById('beep');\r\n    audio.currentTime = 0;\r\n    audio.play();\r\n  }\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      cycle: 'Session',\r\n      sessionTime: 25,\r\n      breakTime: 5,\r\n      clockCount: 25 * 60,\r\n      started: false,\r\n      isPlaying: false\r\n    });\r\n\r\n    clearInterval(this.loop);\r\n\r\n    let audio = document.getElementById('beep');\r\n    audio.pause();\r\n    audio.currentTime = 0;\r\n  }\r\n\r\n  render() {\r\n    const breakProps = {\r\n      title: 'Break',\r\n      time: this.state.breakTime,\r\n      handleDecrease: this.handleBreakDecrease,\r\n      handleIncrease: this.handleBreakIncrease\r\n    }\r\n\r\n    const sessionProps = {\r\n      title: 'Session',\r\n      time: this.state.sessionTime,\r\n      handleDecrease: this.handleSessionDecrease,\r\n      handleIncrease: this.handleSessionIncrease\r\n    }\r\n\r\n    return (\r\n      <div className={`App ${ this.state.cycle }`}>\r\n        <main id=\"clock\" className=\"clock\">\r\n        <h1 id=\"freeCodeCamp\">freeCodeCamp 25+5 clock</h1>\r\n          <div className=\"clock-container\">\r\n            <Timer\r\n              handlePlay={ this.handlePlay }\r\n              handleReset={ this.handleReset }\r\n              clock={ this.state.clockCount }\r\n              cycle={ this.state.cycle }\r\n              isPlaying={ this.state.isPlaying }\r\n            />\r\n\r\n            <audio id=\"beep\" preload=\"auto\" src={ Sound } />\r\n\r\n            <div className=\"set-timer\">\r\n            \r\n               <div id=\"session\"><TimeSet {...sessionProps} /></div>\r\n               <div id=\"break\"><TimeSet {...breakProps} /></div>\r\n              \r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker();\r\n\r\n\r\n"],"sourceRoot":""}